//
//  MuttiDefectCauseSelectVC.m
//  IMEFuture
//
//  Created by 邓亚洲 on 2018/12/7.
//  Copyright © 2018年 Netease. All rights reserved.
//

#import "MuttiDefectCauseSelectVC.h"
#import "VoHeader.h"

#import "QueXianYuanYingHeader.h"
#import "UIColor+DYZColorChange.h"

#import <AVFoundation/AVFoundation.h>

@interface MuttiDefectCauseSelectVC () <UITableViewDataSource,UITableViewDelegate,UIImagePickerControllerDelegate,UINavigationControllerDelegate> {
    CGFloat _height_NavBar;
    CGFloat _height_BottomBar;
    
    NSMutableArray *_arrayDefectCauseVo;
    
    UIView *_viewLoading;
}

@property (nonatomic,strong) UIImagePickerController *imagePicker;
@property (weak, nonatomic) IBOutlet UITableView *tableView;

@property (weak, nonatomic) IBOutlet NSLayoutConstraint *heightNavBar;
@property (weak, nonatomic) IBOutlet NSLayoutConstraint *heightBottomBar;

@end

@implementation MuttiDefectCauseSelectVC

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    _height_NavBar = Height_NavBar;
    _height_BottomBar = Height_BottomBar;
    self.heightNavBar.constant = _height_NavBar;
    self.heightBottomBar.constant = _height_BottomBar;
    
    _viewLoading = [UIView loadingWithFrame:CGRectMake(0, _height_NavBar, kMainW, kMainH-_height_NavBar) color:colorRGB(241, 241, 241) imageView:CGRectMake((kMainW - 34)/2, 180, 34, 34)];
    [self.view addSubview:_viewLoading];
    _viewLoading.hidden = YES;
    
    [self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@"cell"];
    [self.tableView registerNib:[UINib nibWithNibName:@"QueXianYuanYingHeader" bundle:nil] forHeaderFooterViewReuseIdentifier:@"queXianYuanYingHeader"];
    self.tableView.delegate = self;
    self.tableView.dataSource = self;
    self.tableView.separatorStyle = UITableViewCellSelectionStyleNone;
    self.tableView.tableFooterView = [UIView new];
    
    [self initRequest];
}

- (void)initRequest {
    _viewLoading.hidden = NO;
    
    LoginModel *loginModel = [DatabaseTool getLoginModel];
    UserBean *userBean = [UserBean mj_objectWithKeyValues:loginModel.ucenterUser];
    NSString * siteCode = userBean.enterpriseInfo.serialNo;
    
    
    MesPostEntityBean *mesPostEntityBean = [[MesPostEntityBean alloc] init];
    PagerBean *pageBean = [[PagerBean alloc] init];
    pageBean.page = [NSNumber numberWithInt:1];
    pageBean.pageSize = [NSNumber numberWithInt:100];
    
    mesPostEntityBean.pager = pageBean;
    
    ReportWorkDefectCauseVo *defectCauseVo = [[ReportWorkDefectCauseVo alloc] init];
    defectCauseVo.siteCode = siteCode;
    defectCauseVo.productionControlNum = self.batchWorkItemReportVo.productionOperationVo.productionControlNum;
    defectCauseVo.processOperationId = [NSNumber numberWithLong:[self.batchWorkItemReportVo.productionOperationVo.processOperationId longLongValue]];
    defectCauseVo.stage =  @"IQC";
    mesPostEntityBean.entity = defectCauseVo.mj_keyValues;
    NSDictionary *dic = mesPostEntityBean.mj_keyValues;
    
    NSLog(@"%@",dic);

    [HttpMamager postRequestWithURLString:DYZ_defectCause_getDefectCauseByCode parameters:dic success:^(id responseObjectModel) {
        ReturnListBean *returnListBean = responseObjectModel;
        _viewLoading.hidden = YES;
        if ([returnListBean.status isEqualToString:@"SUCCESS"]) {
            _arrayDefectCauseVo = [NSMutableArray arrayWithCapacity:0];
            for (NSDictionary *dic in returnListBean.list) {
                ReportWorkDefectCauseVo *defectCauseVo = [ReportWorkDefectCauseVo mj_objectWithKeyValues:dic];
                for (NSString *str in self.batchWorkItemReportVo.causeList) {
                    if ([defectCauseVo.causeCode isEqualToString:str]) {
                        defectCauseVo.stage = @"1";
                    }
                }
                [_arrayDefectCauseVo addObject:defectCauseVo];
            }
            if (_arrayDefectCauseVo.count == 0) {
                [[MyAlertCenter defaultCenter] postAlertWithMessage:@"请维护缺陷原因"];
            }
            [self.tableView reloadData];
        } else {
            [[MyAlertCenter defaultCenter] postAlertWithMessage:returnListBean.returnMsg];
        }
    } fail:^(NSError *error) {
        _viewLoading.hidden = YES;
    } isKindOfModel:NSClassFromString(@"ReturnListBean")];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return _arrayDefectCauseVo.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return 9.2*2+(kMainW-9.5*2)/4.0 + 35 + 6;
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section {
    if (_arrayDefectCauseVo.count > 0) {
        return 6;
    } else {
        return 0;
    }
    return 0;
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    QueXianYuanYingHeader *view = [tableView dequeueReusableHeaderFooterViewWithIdentifier:@"queXianYuanYingHeader"];
    
    view.view40.hidden = YES;
    view.view41.hidden = YES;
    view.view42.hidden = YES;
//    if (self.batchWorkItemReportVo.defectPictureAttachmentVoList.count == 0) {
//
//    } else if (self.batchWorkItemReportVo.defectPictureAttachmentVoList.count == 1) {
//        view.view40.hidden = NO;
//        view.imageView40.image = [UIImage imageWithData:self.batchWorkItemReportVo.defectPictureAttachmentVoList[0].data];
//    } else if (self.batchWorkItemReportVo.defectPictureAttachmentVoList.count == 2) {
//        view.view40.hidden = NO;
//        view.view41.hidden = NO;
//        view.imageView40.image = [UIImage imageWithData:self.batchWorkItemReportVo.defectPictureAttachmentVoList[0].data];
//        view.imageView41.image = [UIImage imageWithData:self.batchWorkItemReportVo.defectPictureAttachmentVoList[1].data];
//    } else if (self.batchWorkItemReportVo.defectPictureAttachmentVoList.count == 3){
//        view.view40.hidden = NO;
//        view.view41.hidden = NO;
//        view.view42.hidden = NO;
//        view.imageView40.image = [UIImage imageWithData:self.batchWorkItemReportVo.defectPictureAttachmentVoList[0].data];
//        view.imageView41.image = [UIImage imageWithData:self.batchWorkItemReportVo.defectPictureAttachmentVoList[1].data];
//        view.imageView42.image = [UIImage imageWithData:self.batchWorkItemReportVo.defectPictureAttachmentVoList[2].data];
//    }
    
    if (self.defectPictureAttachmentVoList.count == 0) {
        
    } else if (self.defectPictureAttachmentVoList.count == 1) {
        view.view40.hidden = NO;
        view.imageView40.image = [UIImage imageWithData:self.defectPictureAttachmentVoList[0]];
    } else if (self.batchWorkItemReportVo.defectPictureAttachmentVoList.count == 2) {
        view.view40.hidden = NO;
        view.view41.hidden = NO;
        view.imageView40.image = [UIImage imageWithData:self.defectPictureAttachmentVoList[0]];
        view.imageView41.image = [UIImage imageWithData:self.defectPictureAttachmentVoList[1]];
    } else if (self.defectPictureAttachmentVoList.count == 3){
        view.view40.hidden = NO;
        view.view41.hidden = NO;
        view.view42.hidden = NO;
        view.imageView40.image = [UIImage imageWithData:self.defectPictureAttachmentVoList[0]];
        view.imageView41.image = [UIImage imageWithData:self.defectPictureAttachmentVoList[1]];
        view.imageView42.image = [UIImage imageWithData:self.defectPictureAttachmentVoList[2]];
    }
    
    [view.button43 addTarget:self action:@selector(addImage:) forControlEvents:UIControlEventTouchUpInside];
    [view.button40 addTarget:self action:@selector(buttonClickChaKanDaTu:) forControlEvents:UIControlEventTouchUpInside];
    [view.button41 addTarget:self action:@selector(buttonClickChaKanDaTu:) forControlEvents:UIControlEventTouchUpInside];
    [view.button42 addTarget:self action:@selector(buttonClickChaKanDaTu:) forControlEvents:UIControlEventTouchUpInside];
    return view;
}

- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section {
    if (_arrayDefectCauseVo.count > 0) {
        UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, kMainW, 6)];
        view.backgroundColor = [UIColor whiteColor];

        UIView *viewLine = [[UIView alloc] initWithFrame:CGRectMake(0, CGRectGetHeight(view.frame)-0.5, kMainW, 0.5)];
        viewLine.backgroundColor = colorRGB(221, 221, 221);
        [view addSubview:viewLine];
        return view;
    } else {
        return nil;
    }
    return nil;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return 35;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"cell" forIndexPath:indexPath];
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    
    ReportWorkDefectCauseVo *defectCauseVo = _arrayDefectCauseVo[indexPath.row];

    if ([defectCauseVo.stage isEqualToString:@"1"]) {
        cell.imageView.image = [UIImage imageNamed:@"reason_select"];
    } else {
        cell.imageView.image = [UIImage imageNamed:@"reason_unselect"];
    }

    cell.textLabel.textColor = [UIColor colorWithHexString:@"#666666"];
    cell.textLabel.font = [UIFont systemFontOfSize:16];
    cell.textLabel.text = defectCauseVo.causeText;
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    ReportWorkDefectCauseVo *defectCauseVo = _arrayDefectCauseVo[indexPath.row];
    defectCauseVo.stage = [defectCauseVo.stage isEqualToString:@"1"]?@"0":@"1";
    [tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
}

- (void)addImage:(UIButton *)sender {
    if (self.batchWorkItemReportVo.defectPictureAttachmentVoList.count >= 3) {
        [[MyAlertCenter defaultCenter] postAlertWithMessage:@"最多添加3张图片"];
        return;
    }
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction *action0 = [UIAlertAction actionWithTitle:@"拍照" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        //相机权限
        AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
        if (authStatus ==AVAuthorizationStatusRestricted ||//此应用程序没有被授权访问的照片数据。
            authStatus ==AVAuthorizationStatusDenied)  //用户已经明确否认了这一照片数据的应用程序访问
        {
            if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
                self.imagePicker = [[UIImagePickerController alloc] init];
                self.imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;
                self.imagePicker.delegate = self;
                self.imagePicker.allowsEditing = NO;
                [self presentViewController:self.imagePicker animated:YES completion:nil];
                
                
                UIAlertController * alertController = [UIAlertController alertControllerWithTitle:@"请在iPhone的“设置－隐私”选项中，允许智造家访问你的摄像机和麦克风" message:nil preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction *action = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                    [self.imagePicker dismissViewControllerAnimated:YES completion:nil];
                }];
                [alertController addAction:action];
                [self.imagePicker presentViewController:alertController animated:YES completion:nil];
            }
        }else{
            if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
                self.imagePicker = [[UIImagePickerController alloc] init];
                self.imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;
                self.imagePicker.delegate = self;
                self.imagePicker.allowsEditing = NO;
                [self presentViewController:self.imagePicker animated:YES completion:nil];
                
            }
            else
            {
                NSLog(@"手机不支持相机");
            }
        }
        
        
    }];
    UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"从手机相册选择" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary]) {
            self.imagePicker = [[UIImagePickerController alloc] init];
            self.imagePicker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
            self.imagePicker.delegate = self;
            self.imagePicker.allowsEditing = NO;
            [self presentViewController:self.imagePicker animated:YES completion:nil];
        }
    }];
    
    UIAlertAction *action3 = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
    
    [action0 setValue:[UIColor blackColor] forKey:@"titleTextColor"];
    [action1 setValue:[UIColor blackColor] forKey:@"titleTextColor"];
    [action3 setValue:[UIColor blackColor] forKey:@"titleTextColor"];
    
    [alertController addAction:action0];
    [alertController addAction:action1];
    [alertController addAction:action3];
    
    [self presentViewController:alertController animated:YES completion:nil];
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info{
    
    UIImage *image = info[UIImagePickerControllerOriginalImage];
    
    CGSize size = CGSizeMake(640, 640);
    UIGraphicsBeginImageContext(size);
    [image drawInRect:CGRectMake(0, 0, size.width, size.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    NSData *data = UIImageJPEGRepresentation(newImage, 1);
    
    AttachmentVo *attachmentVo = [[AttachmentVo alloc] init];
//    attachmentVo.data = data;
    attachmentVo.fileName = [NSString stringWithFormat:@"%@%@",self.batchWorkItemReportVo.productionOperationVo.productionControlNum,self.batchWorkItemReportVo.productionOperationVo.processOperationId];
    [self.batchWorkItemReportVo.defectPictureAttachmentVoList addObject:attachmentVo];
    
    [self.defectPictureAttachmentVoList addObject:data];
    
    [self.tableView reloadData];
    
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)buttonClickChaKanDaTu:(UIButton *)sender {
//    TpfShanChuTuPianVC *tpfShanChuTuPianVC = [[TpfShanChuTuPianVC alloc] init];
//    tpfShanChuTuPianVC.arrayDataImage = _arrayDateImageView0;
//    tpfShanChuTuPianVC.index = sender.tag;
//    tpfShanChuTuPianVC.buttonBackBlock = ^(NSMutableArray *arrayDataImage) {
//        [self.tableView reloadData];
//    };
//    [self.navigationController pushViewController:tpfShanChuTuPianVC animated:YES];
}

- (IBAction)buttonConfirm:(id)sender {
   self.batchWorkItemReportVo.causeList = [NSMutableArray arrayWithCapacity:0];
    for (ReportWorkDefectCauseVo *defectCauseVo in _arrayDefectCauseVo) {
        if ([defectCauseVo.stage isEqualToString:@"1"]) {
            [self.batchWorkItemReportVo.causeList addObject:defectCauseVo.causeCode];
        }
    }
    self.blockCallBack();
    [self.navigationController popViewControllerAnimated:YES];
}

- (IBAction)back:(id)sender {
    [self.navigationController popViewControllerAnimated:true];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
